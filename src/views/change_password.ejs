<div class="container mt-5">
    <!-- Error div, render content only if error is passed from backend -->
    <div class="error mb-3">
      <% if (typeof error !== 'undefined' && error) { %>
        <div class="alert alert-danger">
          <%= error %>
        </div>
      <% } %>
    </div>
  
    <div class="card p-4 shadow-sm">
      <h2 class="mb-4 text-center">Change Password</h2>
  
      <!-- Form for changing password -->
      <form id="changePasswordForm" method="post">
        <!-- Email Field (fixed value, not editable by user) -->
        <div class="form-group mb-3">
          <label for="email">Email</label>
          <input type="email" class="form-control" id="email" name="email" value="<%= user.email %>" readonly>
        </div>
  
        <!-- Old Password Field -->
        <div class="form-group mb-3">
          <label for="oldPassword">Old Password</label>
          <input type="password" class="form-control" id="oldPassword" name="oldPassword" placeholder="Enter your old password" required>
        </div>
  
        <!-- New Password Field -->
        <div class="form-group mb-3">
          <label for="newPassword">New Password</label>
          <input type="password" class="form-control" id="newPassword" name="newPassword" placeholder="Enter your new password" required>
        </div>
  
        <!-- Confirm New Password Field -->
        <div class="form-group mb-3">
          <label for="confirmNewPassword">Confirm New Password</label>
          <input type="password" class="form-control" id="confirmNewPassword" name="confirmNewPassword" placeholder="Confirm your new password" required>
        </div>
  
        <!-- Submit Button -->
        <button type="button" id="changePasswordButton" class="btn btn-primary w-100">Change Password</button>
  
        <!-- Go Back Button -->
        <button type="button" id="goBackButton" class="btn btn-secondary w-100 mt-3">Go Back</button>
      </form>
    </div>
  </div>
  
  <script>
    async function handleGetRequest(url) {
      const token = localStorage.getItem('authToken'); // Retrieve the token from localStorage
  
      if (!token) {
        // Redirect to the sign-in page with the session expired message
        window.location.href = '/api/users/signIn?message=Session expired, please sign in again';
        return;
      }
  
      try {
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'Authorization': token, // Attach the token directly to the Authorization header
            'Content-Type': 'application/json',
          },
        });
  
        const contentType = response.headers.get('Content-Type');
  
        // Check if the response is HTML or JSON
        if (contentType && contentType.includes('text/html')) {
          // If HTML, load the new page
          const html = await response.text();
  
          // Update the browser URL without reloading the page
          history.pushState(null, null, url);
  
          // Replace the current document content with the new HTML content
          document.open();
          document.write(html);
          document.close();
        } else if (contentType && contentType.includes('application/json')) {
          // If JSON, append error to error div after clearing the div
          const jsonResponse = await response.json();
  
          document.querySelector('.error').innerHTML = ''; // Clear previous errors
          if (jsonResponse.error) {
            document.querySelector('.error').innerHTML = `
              <div class="alert alert-danger">
                ${jsonResponse.error}
              </div>
            `;
          }
        }
      } catch (error) {
        console.error('Error fetching data:', error);
        document.querySelector('.error').innerHTML = `
          <div class="alert alert-danger">
            An error occurred while fetching data. Please try again.
          </div>
        `;
      }
    }
  
    document.getElementById('changePasswordButton').addEventListener('click', async function() {
      // Retrieve form field values using IDs
      const email = document.getElementById('email').value;
      const oldPassword = document.getElementById('oldPassword').value;
      const newPassword = document.getElementById('newPassword').value;
      const confirmNewPassword = document.getElementById('confirmNewPassword').value;

      const url = `/api/users/home/change_password/<%= user._id %>`; // Replace with actual user ID

      const token = localStorage.getItem('authToken');

      try {
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': token
          },
          body: JSON.stringify({
            email: email,
            oldPassword: oldPassword,
            newPassword: newPassword,
            confirmNewPassword: confirmNewPassword // Passing confirmNewPassword to the backend
          })
        });

        const contentType = response.headers.get('Content-Type');

        if (contentType && contentType.includes('application/json')) {
          const data = await response.json();

          if (data.message === 'success') {
            localStorage.removeItem('authToken');
            // Fetch the HTML content for the sign-in page
            const signInUrl = '/api/users/signIn?message=password reset successful';
            
            const signInResponse = await fetch(signInUrl, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
              }
            });

            const signInContentType = signInResponse.headers.get('Content-Type');

            if (signInContentType && signInContentType.includes('text/html')) {
              // If the response is HTML, render the page
              const html = await signInResponse.text();
              
              // Update the URL to the sign-in page
              history.pushState(null, null, signInUrl);
              
              // Replace the current document content with the new HTML content
              document.open();
              document.write(html);
              document.close();
            } else {
              // Handle unexpected content type if necessary
              console.error('Unexpected content type for sign-in page:', signInContentType);
            }
          } else {
            // Display error message if response indicates failure
            const errorDiv = document.querySelector('.error');
            errorDiv.innerHTML = `<div class="alert alert-danger">${data.error}</div>`;
          }
        } else {
          console.error('Unexpected content type for password change response:', contentType);
        }
      } catch (error) {
        console.error('Error:', error);
        // Optionally, display a general error message here
      }
    });
  
    document.getElementById('goBackButton').addEventListener('click', function() {
      const url = 'http://localhost:3200/api/users/home';
      handleGetRequest(url);
    });
  </script>
  
  